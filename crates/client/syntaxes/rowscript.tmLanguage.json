{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "RowScript",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#type"
    },
    {
      "include": "#constant"
    },
    {
      "include": "#number"
    },
    {
      "include": "#string"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.rowscript",
          "match": "\\b(function|let|if|while|for|return)\\b"
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "match": "(?<![A-Za-z])(f32|f64|i8|i16|i32|i64|u8|u16|u32|u64)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.rowscript"
            }
          }
        },
        {
          "name": "entity.name.type.primitive.rowscript",
          "match": "\\b(bool|str)\\b"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.rowscript"
        }
      ]
    },
    "number": {
      "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
      "name": "constant.numeric.rowscript"
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.rowscript"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.rowscript"
        }
      },
      "name": "string.quoted.double.rowscript",
      "patterns": [
        {
          "include": "#stringContent"
        }
      ]
    },
    "stringContent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.rowscript"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.rowscript"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "begin": "/\\*\\*(?!/)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.rowscript"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.rowscript"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.rowscript"
            }
          },
          "end": "\\*/",
          "name": "comment.block.rowscript"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.rowscript"
            }
          },
          "match": "(//).*$\\n?",
          "name": "comment.line.double-slash.rowscript"
        }
      ]
    }
  },
  "scopeName": "source.rowscript"
}
