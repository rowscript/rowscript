type List<T> = [
    Append: {value: T, list: List<T>}
    | Empty
];

function map<From, To>(list: List<From>, f: (item: From) => To): List<To> {
    switch (list) {
        case Empty: Empty
        case Append(item): Append({value: f(item.value), list: item.list.map(f)})
    }
}

function reduce<Value, Item>(
    list: List<Item>,
    init: Value,
    acc: (value: Value, item: Item) => Value
): Value {
    switch (list) {
        case Empty: init
        case Append(item): item.list.reduce(init.acc(item.value), acc)
    }
}

function join(list: List<string>, sep: string): string {
    switch (list) {
        case Empty: ""
        case Append(a): switch (a.list) {
            case Empty: a.value
            case Append(b): a.value + a.list.reduce("", (s, item) => s + sep + item)
        }
    }
}

type RepKind = [
    RepKindNumber
    | RepKindString
    | RepKindBoolean
    | RepKindBigint
    | RepKindUnit
    | RepKindObject
    | RepKindEnum
];
