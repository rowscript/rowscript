function panic<T>(msg: string): T {
    error#throw(msg)
}

type Option<T> = [Ok: T | None];

type Result<T, E> = [Ok: T | Err: E];

function isOk<'A, T>(e: ['A]): boolean
where (Ok: T) <: 'A
{
    switch (e) {
    case Ok(v): true
    case v: false
    }
}

function unwrap<'A, T>(e: ['A]): T
where (Ok: T) <: 'A
{
    switch (e) {
    case Ok(v): v
    case v: panic("unwrap error")
    }
}

interface Iterator<I> {
    next<T>(it: Iterator<T>): Option<T>;
}

class ArrayIterator<T> {
    it: NativeArrayIterator<T>;

    next(): Option<T> {
        arrayIter#next(this.it)
    }
}

interface Iterable<I> {
    iter<It: type -> type, T>(a: Iterable<T>): It<T> where Iterator<It>;
}

class Array<T> {
    a: NativeArray<T>;

    length(): number {
        array#length(this.a)
    }

    push(v: T): number {
        array#push(this.a, v)
    }

    forEach(f: (v: T) -> unit) {
        array#forEach(this.a, f)
    }

    at(i: number): Option<T> {
        array#at(this.a, i)
    }

    insert(i: number, v: T) {
        array#insert(this.a, i, v)
    }

    iter(): ArrayIterator<T> {
        new ArrayIterator(array#iter(this.a))
    }
}
