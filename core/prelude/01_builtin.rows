declare panic<T>(m: string): T;

declare console#log<Args>(...: Args);

declare setTimeout<Args, T>(f: (...: Args) => T, milli: number, ...: Args);

declare json#stringify<T>(a: T): string;

declare number#__add__(a: number, b: number): number;
declare number#__sub__(a: number, b: number): number;
declare number#__mul__(a: number, b: number): number;
declare number#__div__(a: number, b: number): number;
declare number#__mod__(a: number, b: number): number;
declare number#__eq__(a: number, b: number): boolean;
declare number#__neq__(a: number, b: number): boolean;
declare number#__le__(a: number, b: number): boolean;
declare number#__ge__(a: number, b: number): boolean;
declare number#__lt__(a: number, b: number): boolean;
declare number#__gt__(a: number, b: number): boolean;
declare number#toString(a: number): string;

declare boolean#__or__(a: boolean, b: boolean): boolean;
declare boolean#__and__(a: boolean, b: boolean): boolean;
declare boolean#__not__(a: boolean): boolean;

declare bigint#toString(a: bigint): string;

declare rowkey#toString(a: rowkey): string;

declare NativeArrayIterator<T>;
declare arrayIter#next<T>(it: NativeArrayIterator<T>): Option<T>;

declare NativeArray<T>;
declare array#length<T>(a: NativeArray<T>): number;
declare array#push<T>(a: NativeArray<T>, v: T): number;
declare array#forEach<T>(a: NativeArray<T>, f: (v: T) => unit);
declare array#at<T>(a: NativeArray<T>, i: number): Option<T>;
declare array#set<T>(a: NativeArray<T>, i: number, v: T);
declare array#iter<T>(a: NativeArray<T>): NativeArrayIterator<T>;

declare NativeMapIterator<T>;
declare mapIter#next<T>(it: NativeMapIterator<T>): Option<T>;

declare NativeMap<K, V>;
declare map#has<K, V>(m: NativeMap<K, V>, key: K): boolean;
declare map#get<K, V>(m: NativeMap<K, V>, key: K): V;
declare map#set<K, V>(m: NativeMap<K, V>, key: K, value: V);
declare map#delete<K, V>(m: NativeMap<K, V>, key: K): boolean;
declare map#clear<K, V>(m: NativeMap<K, V>);
declare map#iter<K, V>(m: NativeMap<K, V>): NativeMapIterator<Entry<K, V>>;

declare async await#all<T>(executors: NativeArray<Executor<T>>): NativeArray<T>;
declare async await#any<T>(executors: NativeArray<Executor<T>>): T;
