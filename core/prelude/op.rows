interface EqOp {
    __eq__(a: EqOp, b: EqOp): boolean;
}

implements EqOp for string {
    __eq__(a: string, b: string): boolean { string#__eq__(a, b) }
}

implements EqOp for boolean {
    __eq__(a: boolean, b: boolean): boolean { boolean#__eq__(a, b) }
}

implements EqOp for number {
    __eq__(a: number, b: number): boolean { number#__eq__(a, b) }
}

interface NeqOp {
    __neq__(a: NeqOp, b: NeqOp): boolean;
}

implements NeqOp for string {
    __neq__(a: string, b: string): boolean { string#__neq__(a, b) }
}

implements NeqOp for boolean {
    __neq__(a: boolean, b: boolean): boolean { boolean#__neq__(a, b) }
}

implements NeqOp for number {
    __neq__(a: number, b: number): boolean { number#__neq__(a, b) }
}

interface NotOp {
    __not__(a: NotOp): NotOp;
}

implements NotOp for boolean {
    __not__(a: boolean): boolean { boolean#__not__(a) }
}

interface NegOp {
    __neg__(a: NegOp): NegOp;
}

implements NegOp for number {
    __neg__(a: number): number { number#__neg__(a) }
}

interface OrOp {
    __or__(a: OrOp, b: OrOp): OrOp;
}

implements OrOp for boolean {
    __or__(a: boolean, b: boolean): boolean { boolean#__or__(a, b) }
}

interface AndOp {
    __and__(a: AndOp, b: AndOp): AndOp;
}

implements AndOp for boolean {
    __and__(a: boolean, b: boolean): boolean { boolean#__and__(a, b) }
}

interface LeOp {
    __le__(a: LeOp, b: LeOp): boolean;
}

implements LeOp for number {
    __le__(a: number, b: number): boolean { number#__le__(a, b) }
}

interface GeOp {
    __ge__(a: GeOp, b: GeOp): boolean;
}

implements GeOp for number {
    __ge__(a: number, b: number): boolean { number#__ge__(a, b) }
}

interface LtOp {
    __lt__(a: LtOp, b: LtOp): boolean;
}

implements LtOp for number {
    __lt__(a: number, b: number): boolean { number#__lt__(a, b) }
}

interface GtOp {
    __gt__(a: GtOp, b: GtOp): boolean;
}

implements GtOp for number {
    __gt__(a: number, b: number): boolean { number#__gt__(a, b) }
}

interface AddOp {
    __add__(a: AddOp, b: AddOp): AddOp;
}

implements AddOp for number {
    __add__(a: number, b: number): number { number#__add__(a, b) }
}

implements AddOp for string {
    __add__(a: string, b: string): string { string#__add__(a, b) }
}

interface SubOp {
    __sub__(a: SubOp, b: SubOp): SubOp;
}

implements SubOp for number {
    __sub__(a: number, b: number): number { number#__sub__(a, b) }
}

interface MulOp {
    __mul__(a: MulOp, b: MulOp): MulOp;
}

implements MulOp for number {
    __mul__(a: number, b: number): number { number#__mul__(a, b) }
}

interface DivOp {
    __div__(a: DivOp, b: DivOp): DivOp;
}

implements DivOp for number {
    __div__(a: number, b: number): number { number#__div__(a, b) }
}

interface ModOp {
    __mod__(a: ModOp, b: ModOp): ModOp;
}

implements ModOp for number {
    __mod__(a: number, b: number): number { number#__mod__(a, b) }
}

interface GetOp {
    __getitem__(a: GetOp, key: GetOp::Key): GetOp::Value;
}

interface SetOp {
    __setitem__(a: SetOp, key: SetOp::Key, value: SetOp::Value);
}

interface Default {
    default(): Default;
}

implements Default for number {
    default(): number {
        0
    }
}

implements Default for string {
    default(): string {
        ""
    }
}

implements Default for boolean {
    default(): boolean {
        false
    }
}

interface ToString {
    toString(a: ToString): string;
}

implements ToString for number {
    toString(a: number): string {
        number#toString(a)
    }
}

// Duration of time represented in milliseconds for convenience.
//
// TODO: This definition should not be here lol.
type Duration = number;

function milliseconds(d: number): Duration {
    d
}

function seconds(d: number): Duration {
    d * 1000
}

declare setTimeout<Args, T>(f: (...: Args) -> T, dur: Duration, ...: Args);
