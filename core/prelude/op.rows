interface EqOp {
    __eq__(a: this, b: this): boolean;
}

instanceof EqOp for string {
    __eq__(a: string, b: string): boolean { string#__eq__(a, b) }
}

instanceof EqOp for boolean {
    __eq__(a: boolean, b: boolean): boolean { boolean#__eq__(a, b) }
}

instanceof EqOp for number {
    __eq__(a: number, b: number): boolean { number#__eq__(a, b) }
}

interface NeqOp {
    __neq__(a: this, b: this): boolean;
}

instanceof NeqOp for string {
    __neq__(a: string, b: string): boolean { string#__neq__(a, b) }
}

instanceof NeqOp for boolean {
    __neq__(a: boolean, b: boolean): boolean { boolean#__neq__(a, b) }
}

instanceof NeqOp for number {
    __neq__(a: number, b: number): boolean { number#__neq__(a, b) }
}

interface NotOp {
    __not__(a: this): this;
}

instanceof NotOp for boolean {
    __not__(a: boolean): boolean { boolean#__not__(a) }
}

interface NegOp {
    __neg__(a: this): this;
}

instanceof NegOp for number {
    __neg__(a: number): number { number#__neg__(a) }
}

interface OrOp {
    __or__(a: this, b: this): this;
}

instanceof OrOp for boolean {
    __or__(a: boolean, b: boolean): boolean { boolean#__or__(a, b) }
}

interface AndOp {
    __and__(a: this, b: this): this;
}

instanceof AndOp for boolean {
    __and__(a: boolean, b: boolean): boolean { boolean#__and__(a, b) }
}

interface LeOp {
    __le__(a: this, b: this): boolean;
}

instanceof LeOp for number {
    __le__(a: number, b: number): boolean { number#__le__(a, b) }
}

interface GeOp {
    __ge__(a: this, b: this): boolean;
}

instanceof GeOp for number {
    __ge__(a: number, b: number): boolean { number#__ge__(a, b) }
}

interface LtOp {
    __lt__(a: this, b: this): boolean;
}

instanceof LtOp for number {
    __lt__(a: number, b: number): boolean { number#__lt__(a, b) }
}

interface GtOp {
    __gt__(a: this, b: this): boolean;
}

instanceof GtOp for number {
    __gt__(a: number, b: number): boolean { number#__gt__(a, b) }
}

interface AddOp {
    __add__(a: this, b: this): this;
}

instanceof AddOp for number {
    __add__(a: number, b: number): number { number#__add__(a, b) }
}

instanceof AddOp for string {
    __add__(a: string, b: string): string { string#__add__(a, b) }
}

interface SubOp {
    __sub__(a: this, b: this): this;
}

instanceof SubOp for number {
    __sub__(a: number, b: number): number { number#__sub__(a, b) }
}

interface MulOp {
    __mul__(a: this, b: this): this;
}

instanceof MulOp for number {
    __mul__(a: number, b: number): number { number#__mul__(a, b) }
}

interface DivOp {
    __div__(a: this, b: this): this;
}

instanceof DivOp for number {
    __div__(a: number, b: number): number { number#__div__(a, b) }
}

interface ModOp {
    __mod__(a: this, b: this): this;
}

instanceof ModOp for number {
    __mod__(a: number, b: number): number { number#__mod__(a, b) }
}

interface GetOp {
    __getitem__(a: this, key: this::Key): this::Value;
}

interface SetOp {
    __setitem__(a: this, key: this::Key, value: this::Value);
}

interface Default {
    default(): this;
}

instanceof Default for number {
    default(): number {
        0
    }
}

instanceof Default for string {
    default(): string {
        ""
    }
}

instanceof Default for boolean {
    default(): boolean {
        false
    }
}

interface ToString {
    toString(a: this): string;
}

instanceof ToString for number {
    toString(a: number): string {
        number#toString(a)
    }
}

instanceof ToString for bigint {
    toString(a: bigint): string {
        bigint#toString(a)
    }
}

instanceof ToString for string {
    toString(a: string): string {
        a
    }
}

instanceof ToString for boolean {
    toString(a: boolean): string {
        a ? "true" : "false"
    }
}

instanceof ToString for rowkey {
    toString(a: rowkey): string {
        rowkey#toString(a)
    }
}

// Duration of time represented in milliseconds for convenience.
//
// TODO: This definition should not be here lol.
type Duration = number;

function milliseconds(d: number): Duration {
    d
}

function seconds(d: number): Duration {
    d * 1000
}
