WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{ "// " ~ (!NEWLINE ~ ANY)* | "/* " ~ (!"*/" ~ ANY)* ~ "*/" }

// Most specified at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words.
reserved =
  // Basic reserved words.
 _{ "break"
  | "case"
  | "catch"
  | "class"
  | "const"
  | "continue"
  | "debugger"
  | "default"
  | "delete"
  | "do"
  | "else"
  | "export"
  | "extends"
  | "false"
  | "finally"
  | "for"
  | "function"
  | "if"
  | "import"
  | "in"
  | "instanceof"
  | "new"
  | "null"
  | "return"
  | "super"
  | "switch"
  | "this"
  | "throw"
  | "true"
  | "try"
  | "typeof"
  | "var"
  | "void"
  | "while"
  | "with"

  // Strict mode reserved words.
  | "let"
  | "static"
  | "yield"

  // Contextual reserved words.
  | "await"

  // Future reserved words.
  | "enum"

  // Future strict mode reserved words.
  | "implements"
  | "interface"
  | "package"
  | "private"
  | "protected"
  | "public"

  // Conventional reserved words.
  | "abstract"
  | "boolean"
  | "byte"
  | "char"
  | "double"
  | "final"
  | "float"
  | "goto"
  | "int"
  | "long"
  | "native"
  | "short"
  | "synchronized"
  | "throws"
  | "transient"
  | "volatile"

  // Special identifiers.
  | "arguments"
  | "as"
  | "async"
  | "eval"
  | "from"
  | "get"
  | "of"
  | "set"

  // Sanity keywords.
  | "null"
  | "undefined"

  // RowScript ones.
  | "where"
  | "then"
  | "string"
  | "number"
  | "bigint"
  | "unit"
  | "type"
  }

camelback_id = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHA | ASCII_DIGIT)* }
pub_camelback_id = @{ (reserved ~ (ASCII_ALPHA | ASCII_DIGIT)+) | (!reserved ~ camelback_id) }
priv_camelback_id = @{ "_" ~ pub_camelback_id }

pub_camel_id = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHA | ASCII_DIGIT)* }
priv_camel_id = @{ "_" ~ pub_camel_id }

lower_id = @{ reserved? ~ ASCII_ALPHA_LOWER+ }

fn_id = { pub_fn_id | priv_fn_id }
magic_fn_id =
  { "__add__"
  | "__sub__"
  }
pub_fn_id = _{ pub_camelback_id }
priv_fn_id = _{ priv_camelback_id }
row_id = @{ "'" ~ pub_camel_id }
implicit_id = { pub_camel_id }
type_id = { pub_type_id | priv_type_id }
pub_type_id = _{ pub_camel_id }
priv_type_id = _{ priv_camel_id }
prop_id = { pub_camelback_id | priv_camelback_id }
variant_id = { pub_camel_id | priv_camel_id }
field_id = _{ prop_id | variant_id }
param_id = { pub_camelback_id }
let_id = { pub_camelback_id }
this_id = { "this" }
std_pkg_id = { lower_id }
vendor_org_id = @{ "@" ~ lower_id }
vendor_pkg_id = { vendor_org_id ~ "/" ~ lower_id }
module_id = { lower_id }
qualifier =
  { (std_pkg_id | vendor_pkg_id) ~ "::" ~ (module_id ~ "::")*
  | root_prefix ~ (module_id ~ "::")+
  }
root_prefix = { "::" }

idref =
  { qualifier ~ idref
  | builtin
  | fn_id
  | param_id
  | let_id
  | prop_id
  | this_id
  }
builtin =
  { numAdd
  | numSub
  | strAdd
  }
numAdd = { "number#__add__" }
numSub = { "number#__sub__" }
strAdd = { "string#__add__" }

tyref =
  { qualifier ~ tyref
  | implicit_id
  | type_id
  }
importable = { pub_fn_id | pub_type_id }

hole = { "?" }
univ = { "type" }

string = { "\"" ~ unquoted_string_part ~ "\"" }
unquoted_string_part = @{ (unescaped_string_fragment | escaped_string_fragment)* }
unescaped_string_fragment = @{ (!("\"" | "\\") ~ ANY)+ }
escaped_string_fragment =
 @{ "\\"
  ~ ( !("x" | "u" | ASCII_OCT_DIGIT)
    | ASCII_OCT_DIGIT{1,3}
    | "x" ~ ASCII_HEX_DIGIT{2}
    | "u" ~ ASCII_HEX_DIGIT{4}
    | "u{" ~ ASCII_HEX_DIGIT+ ~ "}"
    )
  }

number =
  { binary_number
  | octal_number
  | hex_number
  | decimal_number
  }
bigint = @{ (binary_number | octal_number | hex_number | decimal_digits) ~ "n" }
binary_number = @{ ("0b" | "0B") ~ ASCII_BIN_DIGIT ~ ("_"? ~ ASCII_BIN_DIGIT)* }
octal_number = @{ ("0o" | "0O") ~ ASCII_OCT_DIGIT ~ ("_"? ~ ASCII_OCT_DIGIT)* }
hex_number = @{ ("0x" | "0X") ~ ASCII_HEX_DIGIT ~ ("_"? ~ ASCII_HEX_DIGIT)* }
decimal_number =
 @{ decimal_digits
  | decimal_integer ~ exponent_part
  | "." ~ decimal_digits ~ (exponent_part)?
  | decimal_integer ~ "." ~ decimal_digits? ~ exponent_part?
  }
decimal_digits = @{ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }
exponent_part = @{ ("e" | "E")? ~ ("-" | "+")? ~ decimal_digits }
decimal_integer = @{ "0" | "0"? ~ ASCII_NONZERO_DIGIT ~ ("_"? ~ decimal_digits)? }

implicits =
 _{ "<" ~ row_ids ~ ">"
  | "<" ~ implicit_params ~ ">"
  | "<" ~ row_ids ~ "," ~ implicit_params ~ ">"
  }
row_ids = _{ row_id ~ ("," ~ row_id)* }
implicit_params = _{ implicit_param ~ ("," ~ implicit_param)* }
implicit_param = _{ hkt_param | implicit_id }
hkt_param = { implicit_id ~ ":" ~ hkt_expr }
hkt_expr = _{ univ ~ ("->" ~ univ)* }

param = { param_id ~ ":" ~ type_expr }
params = _{ "()" | "(" ~ param ~ ("," ~ param)* ~ ")" }

field = { field_id ~ ":" ~ type_expr }
property = { prop_id ~ ":" ~ type_expr }
label = { prop_id ~ ":" ~ expr }
variant = { variant_id ~ (":" ~ type_expr)? }

type_expr =
  { fn_type
  | primitive_type
  | object_type_ref
  | object_type_literal
  | enum_type_ref
  | enum_type_literal
  | type_app
  | tyref
  | paren_type_expr
  | hole
  | row_id
  }
primitive_type =
  { string_type
  | number_type
  | bigint_type
  | boolean_type
  | unit_type
  }
paren_type_expr = { "(" ~ type_expr ~ ")" }
fn_type = { params ~ "->" ~ type_expr }
string_type = { "string" }
number_type = { "number" }
bigint_type = { "bigint" }
boolean_type = { "boolean" }
unit_type = { "unit" }
object_type_ref = { "{" ~ row_id ~ "}" }
object_type_literal = { "{" ~ property ~ ("," ~ property)* ~ "}" }
enum_type_ref = { "[" ~ row_id ~ "]" }
enum_type_literal = { "[" ~ variant ~ ("|" ~ variant)* ~ "]" }
type_app = { ("(" ~ type_expr ~ ")" | tyref) ~ implicit_args? }

expr = { primary_expr ~ (infix_op ~ primary_expr)* }
infix_op =
 _{ infix_add
  | infix_sub
  }
infix_add = { "+" }
infix_sub = { "-" }
primary_expr =
  { string
  | number
  | bigint
  | boolean_false
  | boolean_true
  | boolean_if
  | new_expr
  | method_app
  | rev_app
  | object_literal
  | object_concat
  | object_access
  | object_cast
  | enum_variant
  | enum_cast
  | enum_switch
  | lambda_expr
  | app
  | tt
  | idref
  | hole
  | paren_expr
  }
boolean_false = { "false" }
boolean_true = { "true" }
boolean_if =
  { "if" ~ "(" ~ expr ~ ")"
  ~ "{" ~ branch ~ "}"
  ~ "else" ~ "{" ~ branch ~ "}"
  }
branch =
  { branch_let
  | branch_unit_let
  | expr
  }
branch_let = { "let" ~ param_id ~ (":" ~ type_expr)? ~ "=" ~ expr ~ ";" ~ branch }
branch_unit_let = { expr ~ ";" ~ branch }
new_expr = { "new" ~ tyref ~ ("<" ~ type_args ~ ">")? ~ args }
method_app = { ("(" ~ expr ~ ")" | idref) ~ "." ~ prop_id ~ args+ }
rev_app = { ("(" ~ expr ~ ")" | idref) ~ rev_app_callee+ }
rev_app_callee = { "|>" ~ ("(" ~ expr ~ ")" | idref) ~ implicit_args? ~ args+ }
lambda_expr = { lambda_params ~ "=>" ~ lambda_body }
lambda_params = _{ "()" | param_id | "(" ~ param_id ~ ("," ~ param_id)+ ~ ")" }
lambda_body = { expr | fn_body_block }
app = { ("(" ~ expr ~ ")" | idref) ~ implicit_args? ~ args+ }
implicit_args =
 _{ "<" ~ row_args ~ ">"
  | "<" ~ type_args ~ ">"
  | "<" ~ row_args ~ "," ~ type_args ~ ">"
  }
type_args = _{ type_arg ~ ("," ~ type_arg)* }
type_arg = { (tyref ~ "=")? ~ type_expr }
row_args = _{ row_arg ~ ("," ~ row_arg)* }
row_arg = { (row_id ~ "=")? ~ paren_fields }
args = { "()" | "(" ~ expr ~ ("," ~ expr)* ~ ")" }
tt = { "()" }
object_literal = { "{" ~ label ~ ("," ~ label)* ~ "}" }
object_concat = { object_operand ~ "..." ~ object_operand }
object_access = { object_operand ~ "." ~ prop_id }
object_cast = { "{" ~ "..." ~ object_operand ~ "}" }
object_operand =
  { app
  | object_literal
  | idref
  | paren_expr
  }
enum_variant = { variant_id ~ paren_expr? }
enum_cast = { "[" ~ "..." ~ enum_operand ~ "]" }
enum_operand =
  { app
  | enum_variant
  | idref
  | paren_expr
  }
enum_switch = { "switch" ~ paren_expr ~ "{" ~ enum_case+ ~ "}" }
enum_case = { "case" ~ variant_id ~ ("(" ~ param_id ~ ")")? ~ ":" ~ expr }
paren_expr = { "(" ~ expr ~ ")" }

preds = _{ "where" ~ pred ~ ("," ~ pred)* }
pred =
  { row_ord
  | row_eq
  | constraint_expr
  }
row_ord = { row_expr ~ (row_le | row_ge) ~ row_expr }
row_le = { "<:" }
row_ge = { ":>" }
row_eq = { row_expr ~ "=" ~ row_expr }
row_expr =
  { row_concat
  | row_primary_expr
  }
row_primary_expr =
  { row_id
  | paren_fields
  | paren_row_expr
  }
paren_fields = { "(" ~ field ~ ("," ~ field)* ~ ")" }
row_concat = { row_primary_expr ~ "+" ~ row_expr }
paren_row_expr = { "(" ~ row_expr ~ ")" }
constraint_expr = { tyref ~ implicit_args }

fn_def =
  { "function"
  ~ fn_id
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ preds?
  ~ fn_body_block
  }
fn_body_block = _{ "{" ~ fn_body ~ "}" }
fn_body =
  { fn_body_let
  | fn_body_unit_let
  | fn_body_ret
  }
fn_body_let = { "let" ~ param_id ~ (":" ~ type_expr)? ~ "=" ~ expr ~ ";" ~ fn_body }
fn_body_unit_let = { expr ~ ";" ~ fn_body }
fn_body_ret = { "return" ~ expr? }

fn_postulate =
  { "function"
  ~ fn_id
  ~ ("<" ~ implicit_params ~ ">")?
  ~ params
  ~ (":" ~ type_expr)?
  ~ ";"
  }

type_postulate = { "type" ~ type_id ~ ";" }

type_alias =
  { "type"
  ~ type_id
  ~ implicits?
  ~ "="
  ~ type_expr
  ~ ";"
  }

class_def =
  { "class"
  ~ type_id
  ~ ("<" ~ implicit_params ~ ">")?
  ~ "{"
  ~ class_body
  ~ "}"
  }
class_body =
 _{ class_member+ ~ class_method*
  | class_member* ~ class_method+
  }
class_member = { prop_id ~ ":" ~ type_expr ~ ";" }
class_method = { fn_id ~ params ~ (":" ~ type_expr)? ~ fn_body_block }

interface_def =
  { "interface"
  ~ type_id
  ~ "for"
  ~ implicit_id
  ~ implicits?
  ~ "{"
  ~ interface_fn+
  ~ "}"
  }
interface_fn =
  { (fn_id | magic_fn_id)
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ ";"
  }

implements_def =
  { "implements"
  ~ type_id
  ~ "for"
  ~ (tyref | primitive_type)
  ~ "{"
  ~ implements_fn+
  ~ "}"
  }
implements_fn =
  { (fn_id | magic_fn_id)
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ fn_body_block
  }

def =
 _{ fn_def
  | fn_postulate
  | type_postulate
  | type_alias
  | class_def
  | interface_def
  | implements_def
  }

import_std =
  { "from" ~ imported_std_module ~ "import" ~ importables ~ ";"
  | "import" ~ imported_std_module ~ ";"
  }
import_vendor =
  { "from" ~ imported_vendor_module ~ "import" ~ importables ~ ";"
  | "import" ~ imported_vendor_module ~ ";"
  }
import_local =
  { "from" ~ imported_local_module ~ "import" ~ importables ~ ";"
  | "import" ~ imported_local_module ~ ";"
  }
imported_std_module = _{ std_pkg_id ~ ("." ~ module_id)* }
imported_vendor_module = _{ vendor_pkg_id ~ ("." ~ module_id)* }
imported_local_module = _{ ("." ~ module_id)+ }
importables =
 _{ importable_loaded
  | "{" ~ importable ~ ("," ~ importable)* ~ "}"
  }
importable_loaded = { "_" }

file =
  { SOI
  ~ import_std*
  ~ import_vendor*
  ~ import_local*
  ~ def*
  ~ EOI
  }
