WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Most specified at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words.
reserved =
  // Basic reserved words.
 _{ "break"
  | "case"
  | "catch"
  | "class"
  | "const"
  | "continue"
  | "debugger"
  | "do"
  | "else"
  | "export"
  | "extends"
  | "false"
  | "finally"
  | "for"
  | "function"
  | "if"
  | "import"
  | "in"
  | "instanceof"
  | "new"
  | "null"
  | "return"
  | "super"
  | "switch"
  | "this"
  | "throw"
  | "true"
  | "try"
  | "typeof"
  | "var"
  | "void"
  | "while"
  | "with"

  // Strict mode reserved words.
  | "let"
  | "static"
  | "yield"

  // Contextual reserved words.
  | "await"

  // Future reserved words.
  | "enum"

  // Future strict mode reserved words.
  | "implements"
  | "interface"
  | "package"
  | "private"
  | "protected"
  | "public"

  // Conventional reserved words.
  | "abstract"
  | "boolean"
  | "byte"
  | "char"
  | "double"
  | "final"
  | "float"
  | "goto"
  | "int"
  | "long"
  | "native"
  | "short"
  | "synchronized"
  | "throws"
  | "transient"
  | "volatile"

  // Special identifiers.
  | "arguments"
  | "as"
  | "async"
  | "eval"
  | "from"
  | "of"

  // Sanity keywords.
  | "null"
  | "undefined"

  // RowScript ones.
  | "where"
  | "then"
  | "string"
  | "number"
  | "bigint"
  | "unit"
  | "type"

  // RowScript accepts these for fun.
  //| "get"
  //| "set"
  //| "delete"
  //| "default"
  }

camelback_id = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHA | ASCII_DIGIT)* }
pub_camelback_id = @{ (reserved ~ (ASCII_ALPHA | ASCII_DIGIT)+) | (!reserved ~ camelback_id) }
priv_camelback_id = @{ "_" ~ pub_camelback_id }

pub_camel_id = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHA | ASCII_DIGIT)* }
priv_camel_id = @{ "_" ~ pub_camel_id }

lower_id = @{ reserved? ~ ASCII_ALPHA_LOWER+ }

ffi_id = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHA | ASCII_DIGIT | "_" | "$")* }
pub_ffi_id = @{ (reserved ~ (ASCII_ALPHA | ASCII_DIGIT | "_" | "$")+) | (!reserved ~ ffi_id) }
priv_ffi_id = @{ "_" ~ pub_ffi_id }

fn_id = { pub_fn_id | priv_fn_id }
pub_fn_id = _{ pub_camelback_id }
priv_fn_id = _{ priv_camelback_id }
postulate_id = { pub_ffi_id | priv_ffi_id }
row_id = @{ "'" ~ pub_camel_id }
implicit_id = { pub_camel_id }
type_id = { pub_type_id | priv_type_id }
pub_type_id = _{ pub_camel_id }
priv_type_id = _{ priv_camel_id }
prop_id = { pub_camelback_id | priv_camelback_id }
variant_id = { pub_camel_id | priv_camel_id }
field_id = _{ prop_id | variant_id }
pub_field_id = _{ pub_camelback_id | pub_camel_id }
param_id = { pub_camelback_id }
local_id = { pub_camelback_id }
this_id = { "this" }
std_pkg_id = { lower_id }
vendor_org_id = @{ "@" ~ lower_id }
vendor_pkg_id = { vendor_org_id ~ "/" ~ lower_id }
module_id = { lower_id }
qualifier =
  { (std_pkg_id | vendor_pkg_id) ~ "::" ~ (module_id ~ "::")*
  | root_prefix ~ (module_id ~ "::")+
  }
magic_fn_id =
  { "__add__"
  | "__sub__"
  | "__mul__"
  | "__div__"
  | "__mod__"
  | "__or__"
  | "__and__"
  | "__eq__"
  | "__neq__"
  | "__le__"
  | "__ge__"
  | "__lt__"
  | "__gt__"
  | "__not__"
  | "__neg__"
  | "__getitem__"
  | "__setitem__"
  }

idref =
  { qualifier ~ idref
  | builtin
  | postulate_id
  | fn_id
  | param_id
  | local_id
  | prop_id
  | this_id
  }
builtin =
  { "error#throw"
  | "console#log"
  | "boolean#__and__"
  | "boolean#__or__"
  | "boolean#__not__"
  | "boolean#__eq__"
  | "boolean#__neq__"
  | "string#__add__"
  | "string#__eq__"
  | "string#__neq__"
  | "number#__add__"
  | "number#__sub__"
  | "number#__mul__"
  | "number#__div__"
  | "number#__mod__"
  | "number#__eq__"
  | "number#__neq__"
  | "number#__le__"
  | "number#__ge__"
  | "number#__lt__"
  | "number#__gt__"
  | "number#__neg__"
  | "number#toString"
  | "arrayIter#next"
  | "array#length"
  | "array#push"
  | "array#forEach"
  | "array#at"
  | "array#set"
  | "array#iter"
  | "mapIter#next"
  | "map#has"
  | "map#get"
  | "map#set"
  | "map#delete"
  | "map#clear"
  | "map#iter"
  }

tyref =
  { qualifier ~ tyref
  | implicit_id
  | type_id
  }
importable = { pub_fn_id | pub_type_id }

boolean_false = { "false" }
boolean_true = { "true" }
hole = { "?" }
univ = { "type" }
root_prefix = { "::" }
tt = { "()" }

string = @{ "\"" ~ unquoted_string_part ~ "\"" }
unquoted_string_part = @{ (unescaped_string_fragment | escaped_string_fragment)* }
unescaped_string_fragment = @{ (!("\"" | "\\" | NEWLINE) ~ ANY)+ }
multiline_string = @{ "`" ~ unquoted_multiline_string_part ~ "`" }
unquoted_multiline_string_part = @{ (unescaped_multiline_string_fragment | escaped_string_fragment)* }
unescaped_multiline_string_fragment = @{ (!("`" | "\\") ~ ANY)+ }
escaped_string_fragment =
 @{ "\\"
  ~ ( !("x" | "u" | ASCII_OCT_DIGIT)
    | ASCII_OCT_DIGIT{1,3}
    | "x" ~ ASCII_HEX_DIGIT{2}
    | "u" ~ ASCII_HEX_DIGIT{4}
    | "u{" ~ ASCII_HEX_DIGIT+ ~ "}"
    )
  }

number =
  { binary_number
  | octal_number
  | hex_number
  | decimal_number
  }
bigint = @{ (binary_number | octal_number | hex_number | decimal_digits) ~ "n" }
binary_number = @{ ("0b" | "0B") ~ ASCII_BIN_DIGIT ~ ("_"? ~ ASCII_BIN_DIGIT)* }
octal_number = @{ ("0o" | "0O") ~ ASCII_OCT_DIGIT ~ ("_"? ~ ASCII_OCT_DIGIT)* }
hex_number = @{ ("0x" | "0X") ~ ASCII_HEX_DIGIT ~ ("_"? ~ ASCII_HEX_DIGIT)* }
decimal_number =
 @{ decimal_digits
  | decimal_integer ~ exponent_part
  | "." ~ decimal_digits ~ (exponent_part)?
  | decimal_integer ~ "." ~ decimal_digits? ~ exponent_part?
  }
decimal_digits = @{ ASCII_DIGIT ~ ("_"? ~ ASCII_DIGIT)* }
exponent_part = @{ ("e" | "E")? ~ ("-" | "+")? ~ decimal_digits }
decimal_integer = @{ "0" | "0"? ~ ASCII_NONZERO_DIGIT ~ ("_"? ~ decimal_digits)? }

implicits =
 _{ "<" ~ row_ids ~ ">"
  | "<" ~ implicit_params ~ ">"
  | "<" ~ row_ids ~ "," ~ implicit_params ~ ">"
  }
row_ids = _{ row_id ~ ("," ~ row_id)* }
implicit_params = _{ implicit_param ~ ("," ~ implicit_param)* }
implicit_param = _{ hkt_param | implicit_id }
hkt_param = { implicit_id ~ ":" ~ hkt_expr }
hkt_expr = _{ univ ~ ("->" ~ univ)* }

param = { param_id ~ ":" ~ type_expr }
variadic_param = { "..." ~ param_id? ~ ":" ~ type_expr }
params =
 _{ "()"
  | "(" ~ variadic_param ~ ")"
  | "(" ~ param ~ ("," ~ param)* ~ ("," ~ variadic_param)? ~ ")"
  }

field = { field_id ~ ":" ~ type_expr }
pub_field = { pub_field_id ~ ":" ~ type_expr }
property = { prop_id ~ ":" ~ type_expr }
label = { prop_id ~ ":" ~ expr }
variant = { variant_id ~ (":" ~ type_expr)? }

type_expr =
  { fn_type
  | primitive_type
  | object_type_ref
  | object_type_literal
  | enum_type_ref
  | enum_type_literal
  | type_app
  | tyref
  | paren_type_expr
  | hole
  | row_id
  }
primitive_type =
  { string_type
  | number_type
  | bigint_type
  | boolean_type
  | unit_type
  }
paren_type_expr = { "(" ~ type_expr ~ ")" }
fn_type = { params ~ "->" ~ type_expr }
string_type = { "string" }
number_type = { "number" }
bigint_type = { "bigint" }
boolean_type = { "boolean" }
unit_type = { "unit" }
object_type_ref = { "{" ~ row_id ~ "}" }
object_type_literal = { "{" ~ property ~ ("," ~ property)* ~ "}" }
enum_type_ref = { "[" ~ row_id ~ "]" }
enum_type_literal = { "[" ~ variant ~ ("|" ~ variant)* ~ "]" }
type_app = { ("(" ~ type_expr ~ ")" | tyref) ~ implicit_args? ~ ("::" ~ type_id)? }

expr = { prefix_op* ~ primary_expr ~ (infix_op ~ prefix_op* ~ primary_expr)* }
prefix_op =
 _{ prefix_not
  | prefix_neg
  }
prefix_not = { "!" }
prefix_neg = { "-" }
infix_op =
 _{ infix_add
  | infix_sub
  | infix_mul
  | infix_div
  | infix_mod
  | infix_eq
  | infix_neq
  | infix_le
  | infix_ge
  | infix_lt
  | infix_gt
  | infix_and
  | infix_or
  | infix_concat
  }
infix_add = { "+" }
infix_sub = { "-" }
infix_mul = { "*" }
infix_div = { "/" }
infix_mod = { "%" }
infix_eq = { "==" }
infix_neq = { "!=" }
infix_le = { "<=" }
infix_ge = { ">=" }
infix_lt = { "<" }
infix_gt = { ">" }
infix_and = { "&&" }
infix_or = { "||" }
infix_concat = { "..." }
primary_expr =
  { boolean_if
  | chainable_expr
  }
boolean_if = { chainable_operand ~ "?" ~ expr ~ ":" ~ expr }
chainable_expr = { chainable_operand ~ chainable_operator* }
chainable_operand =
  { object_cast
  | enum_cast
  | enum_switch
  | lambda_expr
  | new_expr
  | paren_expr
  | string
  | multiline_string
  | number
  | bigint
  | boolean_false
  | boolean_true
  | object_literal
  | enum_variant
  | array_literal
  | map_literal
  | hole
  | tt
  | idref
  }
object_cast = { "{" ~ "..." ~ expr ~ "}" }
enum_switch = { "switch" ~ paren_expr ~ "{" ~ enum_case+ ~ enum_default_case? ~ "}" }
enum_cast = { "[" ~ "..." ~ expr ~ "]" }
enum_case = { "case" ~ variant_id ~ ("(" ~ param_id ~ ")")? ~ ":" ~ expr }
enum_default_case = { "case" ~ local_id ~ ":" ~ expr }
lambda_expr = { lambda_params ~ "=>" ~ lambda_body }
lambda_params = _{ "()" | "(" ~ param_id ~ ("," ~ param_id)* ~ ")" }
lambda_body = { expr | fn_body_block }
new_expr = { "new " ~ tyref ~ ("<" ~ type_args ~ ">")? ~ args }
paren_expr = { "(" ~ expr ~ ")" }
object_literal = { "{" ~ label ~ ("," ~ label)* ~ "}" }
enum_variant = { variant_id ~ paren_expr? }
array_literal = { "[]" | "[" ~ expr ~ ("," ~ expr)* ~ "]" }
map_literal = { "{}" | "{" ~ chainable_operand ~ ":" ~ expr ~ ("," ~ chainable_operand ~ ":" ~ expr)* ~ "}" }
chainable_operator =
  { index
  | app
  | access
  }
index = { "[" ~ expr ~ "]" }
app = { ("." ~ idref)? ~ implicit_args? ~ args+ }
implicit_args =
 _{ "<" ~ row_args ~ ">"
  | "<" ~ type_args ~ ">"
  | "<" ~ row_args ~ "," ~ type_args ~ ">"
  }
type_args = _{ type_arg ~ ("," ~ type_arg)* }
type_arg = { (tyref ~ "=")? ~ type_expr }
row_args = _{ row_arg ~ ("," ~ row_arg)* }
row_arg = { (row_id ~ "=")? ~ row_literal }
args =
  { "()"
  | "(" ~ spread_arg ~ ")"
  | "(" ~ expr ~ ("," ~ expr)* ~ ("," ~ spread_arg)? ~ ")"
  }
spread_arg = { "..." ~ expr? }
access = { "." ~ prop_id }

branch =
  { branch_const
  | branch_let
  | branch_local_assign
  | branch_object_assign
  | branch_item_assign
  | branch_unit_const
  | branch_ignored
  | branch_while
  | branch_fori
  | branch_forof
  | branch_if
  | ctl_return
  | ctl_expr
  }
branch_const = { const_stmt ~ ";" ~ branch }
branch_let = { let_stmt ~ ";" ~ branch }
branch_object_assign = { object_assign_stmt ~ ";" ~ branch }
branch_item_assign = { item_assign_stmt ~ ";" ~ branch }
branch_local_assign = { local_assign_stmt ~ ";" ~ branch }
branch_unit_const = { unit_const_stmt ~ ";" ~ branch }
branch_ignored = { ignored_stmt ~ ";" ~ branch }
branch_while = { while_stmt_start ~ loop_branch ~ "}" ~ branch }
branch_fori = { fori_stmt_start ~ loop_branch ~ "}" ~ branch }
branch_forof = { forof_stmt_start ~ loop_branch ~ "}" ~ branch }
branch_if = { if_stmt_start ~ branch ~ (else_stmt_start ~ branch)? ~ "}" ~ branch }
loop_branch =
  { loop_branch_const
  | loop_branch_let
  | loop_branch_local_assign
  | loop_branch_object_assign
  | loop_branch_item_assign
  | loop_branch_unit_const
  | loop_branch_ignored
  | loop_branch_while
  | loop_branch_fori
  | loop_branch_forof
  | loop_branch_if
  | ctl_continue
  | ctl_break
  | ctl_return
  | ctl_expr
  }
loop_branch_const = { const_stmt ~ ";" ~ loop_branch }
loop_branch_let = { let_stmt ~ ";" ~ loop_branch }
loop_branch_object_assign = { object_assign_stmt ~ ";" ~ loop_branch }
loop_branch_item_assign = { item_assign_stmt ~ ";" ~ loop_branch }
loop_branch_local_assign = { local_assign_stmt ~ ";" ~ loop_branch }
loop_branch_unit_const = { unit_const_stmt ~ ";" ~ loop_branch }
loop_branch_ignored = { ignored_stmt ~ ";" ~ loop_branch }
loop_branch_while = { while_stmt_start ~ loop_branch ~ "}" ~ loop_branch }
loop_branch_fori = { fori_stmt_start ~ loop_branch ~ "}" ~ loop_branch }
loop_branch_forof = { forof_stmt_start ~ loop_branch ~ "}" ~ loop_branch }
loop_branch_if = { if_stmt_start ~ loop_branch ~ (else_stmt_start ~ loop_branch)? ~ "}" ~ loop_branch }

const_stmt = { "const" ~ local_id ~ (":" ~ type_expr)? ~ "=" ~ expr }
let_stmt = { "let" ~ local_id ~ (":" ~ type_expr)? ~ "=" ~ expr }
object_assign_stmt = { (local_id | this_id) ~ "." ~ prop_id ~ "=" ~ expr }
item_assign_stmt = { local_id ~ "[" ~ expr ~ "]" ~ "=" ~ expr }
local_assign_stmt = { local_id ~ "=" ~ expr }
unit_const_stmt = { expr }
ignored_stmt = { "_" ~ "=" ~ expr }
while_stmt_start = _{ "while" ~ "(" ~ expr ~ ")" ~ "{" }
fori_stmt_start = _{ "for" ~ "(" ~ fori_clause ~ ")" ~ "{" }
fori_clause = { fori_init? ~ ";" ~ expr? ~ ";" ~ fori_step? }
fori_init =
  { const_stmt
  | let_stmt
  | local_assign_stmt
  | item_assign_stmt
  | unit_const_stmt
  }
fori_step =
  { local_assign_stmt
  | item_assign_stmt
  | unit_const_stmt
  }
forof_stmt_start = _{ "for" ~ "(" ~ (forof_const | forof_let) ~ local_id ~ "of" ~ expr ~ ")" ~ "{" }
forof_const = { "const" }
forof_let = { "let" }
if_stmt_start = _{ "if" ~ "(" ~ expr ~ ")" ~ "{" }
else_stmt_start = _{ "}" ~ "else" ~ "{" }
ctl_continue = { "continue" ~ ";"? }
ctl_break = { "break" ~ ";"? }
ctl_return =  { "return" ~ expr? ~ ";"? }
ctl_expr =  { expr? ~ ";"? }

preds = _{ "where" ~ pred ~ ("," ~ pred)* }
pred =
  { row_ord
  | row_eq
  | interface_constraint
  }
row_ord = { row_expr ~ "keyof" ~ row_expr }
row_eq = { row_expr ~ "=" ~ row_expr }
row_expr =
  { row_concat
  | row_primary_expr
  }
row_primary_expr =
  { row_id
  | row_literal
  | paren_row_expr
  }
row_literal = { "(" ~ pub_field ~ ("," ~ pub_field)* ~ ")" }
row_concat = { row_primary_expr ~ "+" ~ row_expr }
paren_row_expr = { "(" ~ row_expr ~ ")" }
interface_constraint = { tyref ~ implicit_args }

fn_def =
  { "function"
  ~ fn_id
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ preds?
  ~ fn_body_block
  }
fn_body_block = _{ "{" ~ fn_body ~ "}" }
fn_body =
  { fn_body_const
  | fn_body_let
  | fn_body_object_assign
  | fn_body_item_assign
  | fn_body_local_assign
  | fn_body_unit_const
  | fn_body_ignored
  | fn_body_while
  | fn_body_fori
  | fn_body_forof
  | fn_body_if
  | fn_body_ret
  }
fn_body_const = { const_stmt ~ ";" ~ fn_body }
fn_body_let = { let_stmt ~ ";" ~ fn_body }
fn_body_object_assign = { object_assign_stmt ~ ";" ~ fn_body }
fn_body_item_assign = { item_assign_stmt ~ ";" ~ fn_body }
fn_body_local_assign = { local_assign_stmt ~ ";" ~ fn_body }
fn_body_unit_const = { unit_const_stmt ~ ";" ~ fn_body }
fn_body_ignored = { ignored_stmt ~ ";" ~ fn_body }
fn_body_while = { while_stmt_start ~ loop_branch ~ "}" ~ fn_body }
fn_body_fori = { fori_stmt_start ~ loop_branch ~ "}" ~ fn_body }
fn_body_forof = { forof_stmt_start ~ loop_branch ~ "}" ~ fn_body }
fn_body_if = { if_stmt_start ~ branch ~ (else_stmt_start ~ branch)? ~ "}" ~ fn_body }
fn_body_ret = { expr? }

fn_postulate =
  { "function"
  ~ postulate_id
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ preds?
  ~ ";"
  }

type_postulate = { "type" ~ type_id ~ implicits? ~ ";" }

type_alias =
  { "type"
  ~ type_id
  ~ implicits?
  ~ "="
  ~ type_expr
  ~ ";"
  }

interface_def =
  { "interface"
  ~ type_id
  ~ implicits?
  ~ "{"
  ~ interface_fn+
  ~ "}"
  }
interface_fn =
  { (fn_id | magic_fn_id)
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ preds?
  ~ ";"
  }

implements_def =
  { "implements"
  ~ type_id
  ~ "for"
  ~ (tyref | primitive_type)
  ~ "{"
  ~ implements_fn+
  ~ "}"
  }
implements_fn =
  { (fn_id | magic_fn_id)
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ fn_body_block
  }

const_def = { ("const" ~ fn_id ~ (":" ~ type_expr)? ~ "=")? ~ expr ~ ";" }

class_def =
  { "class"
  ~ type_id
  ~ ("<" ~ implicit_params ~ ">")?
  ~ "{"
  ~ associated_type*
  ~ class_member+
  ~ class_method*
  ~ "}"
  }
associated_type = { "type" ~ type_id ~ "=" ~ type_expr ~ ";" }
class_member = { prop_id ~ ":" ~ type_expr ~ ("=" ~ expr)? ~ ";" }
class_method =
  { (fn_id | magic_fn_id)
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ preds?
  ~ fn_body_block
  }

type_verify =
  { "declare"
  ~ tyref
  ~ implicits?
  ~ preds?
  ~ ";"
  }

fn_verify =
  { "declare"
  ~ idref
  ~ implicits?
  ~ params
  ~ (":" ~ type_expr)?
  ~ preds?
  ~ ";"
  }

def =
 _{ fn_def
  | fn_postulate
  | type_postulate
  | type_alias
  | interface_def
  | implements_def
  | const_def
  | class_def
  | type_verify
  | fn_verify
  }

import_std =
  { "from" ~ imported_std_module ~ "import" ~ importables ~ ";"
  | "import" ~ imported_std_module ~ ";"
  }
import_vendor =
  { "from" ~ imported_vendor_module ~ "import" ~ importables ~ ";"
  | "import" ~ imported_vendor_module ~ ";"
  }
import_local =
  { "from" ~ imported_local_module ~ "import" ~ importables ~ ";"
  | "import" ~ imported_local_module ~ ";"
  }
imported_std_module = { std_pkg_id ~ ("." ~ module_id)* }
imported_vendor_module = { vendor_pkg_id ~ ("." ~ module_id)* }
imported_local_module = { ("." ~ module_id)+ }
importables =
 _{ importable_loaded
  | "{" ~ importable ~ ("," ~ importable)* ~ "}"
  }
importable_loaded = { "_" }

file =
  { SOI
  ~ import_std*
  ~ import_vendor*
  ~ import_local*
  ~ def*
  ~ EOI
  }
