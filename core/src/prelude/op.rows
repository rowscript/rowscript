interface EqOp<T> {
    __eq__(a: T, b: T): boolean;
}

instanceof EqOp<string> {
    __eq__(a: string, b: string): boolean { string#__eq__(a, b) }
}

instanceof EqOp<boolean> {
    __eq__(a: boolean, b: boolean): boolean { boolean#__eq__(a, b) }
}

instanceof EqOp<number> {
    __eq__(a: number, b: number): boolean { number#__eq__(a, b) }
}

interface NeqOp<T> {
    __neq__(a: T, b: T): boolean;
}

instanceof NeqOp<string> {
    __neq__(a: string, b: string): boolean { string#__neq__(a, b) }
}

instanceof NeqOp<boolean> {
    __neq__(a: boolean, b: boolean): boolean { boolean#__neq__(a, b) }
}

instanceof NeqOp<number> {
    __neq__(a: number, b: number): boolean { number#__neq__(a, b) }
}

interface NotOp<T> {
    __not__(a: T): T;
}

instanceof NotOp<boolean> {
    __not__(a: boolean): boolean { boolean#__not__(a) }
}

interface NegOp<T> {
    __neg__(a: T): T;
}

instanceof NegOp<number> {
    __neg__(a: number): number { number#__neg__(a) }
}

interface OrOp<T> {
    __or__(a: T, b: T): T;
}

instanceof OrOp<boolean> {
    __or__(a: boolean, b: boolean): boolean { boolean#__or__(a, b) }
}

interface AndOp<T> {
    __and__(a: T, b: T): T;
}

instanceof AndOp<boolean> {
    __and__(a: boolean, b: boolean): boolean { boolean#__and__(a, b) }
}

interface LeOp<T> {
    __le__(a: T, b: T): boolean;
}

instanceof LeOp<number> {
    __le__(a: number, b: number): boolean { number#__le__(a, b) }
}

interface GeOp<T> {
    __ge__(a: T, b: T): boolean;
}

instanceof GeOp<number> {
    __ge__(a: number, b: number): boolean { number#__ge__(a, b) }
}

interface LtOp<T> {
    __lt__(a: T, b: T): boolean;
}

instanceof LtOp<number> {
    __lt__(a: number, b: number): boolean { number#__lt__(a, b) }
}

interface GtOp<T> {
    __gt__(a: T, b: T): boolean;
}

instanceof GtOp<number> {
    __gt__(a: number, b: number): boolean { number#__gt__(a, b) }
}

interface AddOp<T> {
    __add__(a: T, b: T): T;
}

instanceof AddOp<number> {
    __add__(a: number, b: number): number { number#__add__(a, b) }
}

instanceof AddOp<string> {
    __add__(a: string, b: string): string { string#__add__(a, b) }
}

interface SubOp<T> {
    __sub__(a: T, b: T): T;
}

instanceof SubOp<number> {
    __sub__(a: number, b: number): number { number#__sub__(a, b) }
}

interface MulOp<T> {
    __mul__(a: T, b: T): T;
}

instanceof MulOp<number> {
    __mul__(a: number, b: number): number { number#__mul__(a, b) }
}

interface DivOp<T> {
    __div__(a: T, b: T): T;
}

instanceof DivOp<number> {
    __div__(a: number, b: number): number { number#__div__(a, b) }
}

interface ModOp<T> {
    __mod__(a: T, b: T): T;
}

instanceof ModOp<number> {
    __mod__(a: number, b: number): number { number#__mod__(a, b) }
}

interface GetOp<T> {
    __getitem__(a: T, key: T::Key): T::Value;
}

interface SetOp<T> {
    __setitem__(a: T, key: T::Key, value: T::Value);
}

interface Default<T> {
    default(): T;
}

instanceof Default<number> {
    default(): number {
        0
    }
}

instanceof Default<string> {
    default(): string {
        ""
    }
}

instanceof Default<boolean> {
    default(): boolean {
        false
    }
}

interface ToString<T> {
    toString(a: T): string;
}

instanceof ToString<number> {
    toString(a: number): string {
        number#toString(a)
    }
}

instanceof ToString<bigint> {
    toString(a: bigint): string {
        bigint#toString(a)
    }
}

instanceof ToString<string> {
    toString(a: string): string {
        a
    }
}

instanceof ToString<boolean> {
    toString(a: boolean): string {
        a ? "true" : "false"
    }
}

instanceof ToString<rowkey> {
    toString(a: rowkey): string {
        rowkey#toString(a)
    }
}
