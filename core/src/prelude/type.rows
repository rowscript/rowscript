type Option<T> = [Ok(T) | None];

type Result<T, E> = [Ok(T) | Err(E)];

function isOk<'a, T>(e: ['a]): boolean
with (Ok: T) keyof 'a
{
    switch (e) {
    case Ok(v): true
    case v: false
    }
}

function unwrap<'a, T>(e: ['a]): T
with (Ok: T) keyof 'a
{
    switch (e) {
    case Ok(v): v
    case v: panic("unwrap error")
    }
}

type Entry<K, V> = {
    key: K,
    value: V
};

type Executor<T> = (resolve: (value: T) => unit) => unit;
