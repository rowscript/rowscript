interface Iterator {
    next(it: this): Option<this::Item>;
}

interface Iterable {
    iter<T>(a: this): T where T instanceof Iterator;
}

class ArrayIterator<T> {
    type Item = T;

    NativeArrayIterator<T>;

    next(): Option<T> {
        arrayIter#next(this)
    }
}

class Array<T> {
    type Key = number;
    type Value = T;

    NativeArray<T>;

    length(): number {
        array#length(this)
    }

    push(value: T): number {
        array#push(this, value)
    }

    forEach(f: (value: T) => unit) {
        array#forEach(this, f)
    }

    at(index: number): Option<T> {
        array#at(this, index)
    }

    get(index: number): Option<T> {
        this.at(index)
    }

    __getitem__(index: number): T {
        this.get(index).unwrap()
    }

    set(index: number, value: T) {
        array#set(this, index, value)
    }

    __setitem__(index: number, value: T) {
        this.set(index, value)
    }

    iter(): ArrayIterator<T> {
        new ArrayIterator(array#iter(this))
    }
}


class MapIterator<K, V> {
    type Item = Entry<K, V>;

    NativeMapIterator<Item>;

    next(): Option<Item> {
        mapIter#next(this)
    }
}

class Map<K, V> {
    type Key = K;
    type Value = V;

    NativeMap<K, V>;

    has(key: K): boolean {
        map#has(this, key)
    }

    get(key: K): Option<V> {
        (this.has(key)) ? Ok(map#get(this, key)) : None
    }

    __getitem__(key: K): V {
        this.get(key).unwrap()
    }

    set(key: K, value: V): Map<K, V> {
        map#set(this, key, value);
        this
    }

    __setitem__(key: K, value: V) {
        _ = this.set(key, value);
    }

    delete(key: K): boolean {
        map#delete(this, key)
    }

    clear() {
        map#clear(this)
    }

    iter(): MapIterator<K, V> {
        new MapIterator(map#iter(this))
    }
}
