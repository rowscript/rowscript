function numAdd(a: number, b: number): number;

type Foo = {n: number};

interface NatLike {
    add(a: NatLike, b: NatLike): NatLike;
}

implements NatLike for Foo {
    add(a: Foo, b: Foo): Foo {
        {n: numAdd(a.n, b.n)}
    }
}

type Bar = {m: number};
implements NatLike for Bar {
    add(a: Bar, b: Bar): Bar { {m: numAdd(a.m, b.m)} }
}

function f0<T>(a: T): T
where NatLike<T>
{
    add(a, a)
}

function f1(): number {
    f0({n: 42}).n
}
