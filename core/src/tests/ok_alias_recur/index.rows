type Nat = [Z | S: Nat];

function f0(): Nat {
    S(S(Z))
}

type List<T> = [
    Append: {value: T, rest: List<T>}
    | Empty
];

function f1(): List<number> {
    Empty
}

function f2(): List<number> {
    Append({value: 2, rest: Append({value: 1, rest: Empty})})
}
console.log(f2());

function foldNat<T>(init: T, n: Nat, f: (a: T) => T): T {
    switch (n) {
        case S(x): foldNat(f(init), x, f)
        case Z: init
    }
}
const a3 = foldNat(0, S(S(Z)), (n) => n + 1);

function fold<T, ItemT>(init: T, list: List<ItemT>, f: (a: T, i: ItemT) => T): T {
    switch (list) {
        case Append(item): fold(f(init, item.value), item.rest, f)
        case Empty: init
    }
}
const a4 = fold(0, f2(), (n, i) => n + i);
