type Nat = [Z | S: Nat];

function f0(): Nat {
    S(S(Z))
}

type List<T> = [
    Append: {value: T, rest: List<T>}
    | Empty
];

function f1(): List<number> {
    Empty
}

function f2(): List<number> {
    Append({value: 2, rest: Append({value: 1, rest: Empty})})
}
console.log(f2());

// TODO: This loops.
//function fold<T, ItemT>(init: T, list: List<ItemT>, f: (a: T, i: ItemT) => T): T {
//    switch (list) {
//        case Append(item): fold(f(init, item.value), item.rest, f)
//        case Empty: init
//    }
//}
