interface Functor<F: type => type> {
    myMap<A, B>(f: (a: A) => B, x: F<A>): F<B>;
}

type Foo<T> = {n: T};

instanceof Functor<Foo> {
    myMap<A, B>(f: (a: A) => B, x: Foo<A>): Foo<B> {
        {n: f(x.n)}
    }
}

type Bar<T> = {m: T};

instanceof Functor<Bar> {
    myMap<A, B>(f: (a: A) => B, x: Bar<A>): Bar<B> {
        {m: f(x.m)}
    }
}

function numToStr(n: number): string;

function f0(): string {
    myMap<Foo>(numToStr, {n: 42}).n
}
