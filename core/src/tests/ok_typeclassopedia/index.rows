interface Functor<T> {
    map<A, B>(f: (a: A) -> B, x: Functor<A>): Functor<B>;
}

type Foo<T> = {n: T};

implements Functor for Foo {
    map<A, B>(f: (a: A) -> B, x: Foo<A>): Foo<B> {
        {n: f(x.n)}
    }
}

type Bar<T> = {m: T};

implements Functor for Bar {
    map<A, B>(f: (a: A) -> B, x: Bar<A>): Bar<B> {
        {m: f(x.m)}
    }
}

function numToStr(n: number): string;

function f0(): string {
    map<Foo>(numToStr, {n: 42}).n
}
