function isConflict(r1: number, c1: number, r2: number, c2: number): boolean {
    r1 == r2 || c1 == c2 || r1 - c1 == r2 - c2 || r1 + c1 == r2 + c2
}

function lastQueenHasConflict(queens: Array<number>, row: number): boolean {
    for (let r = 0; r < row; r = r + 1) {
        if (isConflict(r, queens[r], row, queens[row])) {
            return true;
        }
    }
    false
}

function dfs(n: number, dep: number, queens: Array<number>): number {
    if (dep == n) {
        return 1;
    }
    let cnt = 0;
    for (let c = 0; c < n; c = c + 1) {
        queens[dep] = c;
        if (!lastQueenHasConflict(queens, dep)) {
            cnt = cnt + dfs(n, dep + 1, queens);
        }
    }
    cnt
}

function nqueens(n: number): number {
    dfs(n, 0, [])
}

console.log(nqueens(8));
