function numAdd(a: number, b: number): number;
function numMul(a: number, b: number): number;

type Foo = {n: number};

interface NatLike {
    add(a: NatLike, b: NatLike): NatLike;
    mul(a: NatLike, b: NatLike): NatLike;
}

instanceof NatLike for Foo {
    add(a: Foo, b: Foo): Foo {
        {n: numAdd(a.n, b.n)}
    }

    mul(a: Foo, b: Foo): Foo {
        {n: numMul(a.n, b.n)}
    }
}

function f0(): number {
    add({n: 42}, {n: 69}).n
}

function f1(): number {
    f0()
}

interface Pure { pure(): Pure; }
instanceof Pure for Foo { pure(): Foo { {n: 0} } }
function g0(): Foo { pure() }
function g1(): Foo { g0() }
