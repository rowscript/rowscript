interface Functor<F: type => type> {
    myMap<A, B>(f: (a: A) => B, x: F<A>): F<B>;
}

type Foo<T> = {n: T};

instanceof Functor<Foo> {
    myMap<A, B>(f: (a: A) => B, x: Foo<A>): Foo<B> {
        {n: f(x.n)}
    }
}

function numToStr(n: number): string;

function f0<M: type => type, A, B>(f: (a: A) => B, x: M<A>): M<B>
with Functor<M>
{
    myMap<M>(f, x)
}

function f1(): string {
    f0<Foo>(numToStr, {n: 42}).n
}
