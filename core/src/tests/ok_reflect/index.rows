type A = {a: string};
type B = [B0: string | B1];
type C = [C0: A | C1: B];
type D = {a: A, b: B};

type E = {_a: string};
type F = [_F0 | _F1];

type G = string;

const x0: Reflect<A> = {
    kind: RepKindObject,
    props: {
        a: {
            name: "a",
            kind: RepKindString,
            value: "hello"
        }
    }
};

const x1: Reflect<B> = {
    kind: RepKindEnum,
    variants: {
        caseB0: {
            name: "B0",
            kind: RepKindString
        },
        caseB1: {
            name: "B1",
            kind: RepKindUnit
        }
    },
    value: B0("hello")
};
