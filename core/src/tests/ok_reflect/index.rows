function f0(): Typeof {
    typeof {a: 42}
}
console.log(f0());

function f1(): string {
    (keyof {a: 42, b: "hello"}).map(toString).join(", ")
}
console.log(f1());

function f2(): string {
    const a = {a: 42, b: "hello"};
    "?" + (keyof a).map((k) => k.toString() + "=" + (a @ k).toString()).join("&")
}
console.log(f2());

function f3(): string {
    const a = {a: 42, b: false};
    "{" + (keyof a).map((k) => "\"" + k.toString() + "\":" + (a @ k).toJSON()).join(",") + "}"
}
console.log(f3());

// This cannot be done, because we don't normalize this whole function definition.
//function f3(): string {
//    const a = {b: "hello"};
//    switch (keyof a) {
//        case Append(k): a @ k.value
//        case Empty: panic("impossible")
//    }
//}

function f4(): string {
    const a = Hello(42);
    "{" + (keyof a).map((k) => "\"" + k.toString() + "\":" + (a @ k).toJSON()).join(",") + "}"
}
console.log(f4());
