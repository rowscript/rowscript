type A = {a: string};

const x0: Reflect<A> = {
    kind: RepKindObject,
    value: {a: "hello"},
    props: {
        a: {
            name: "a",
            kind: RepKindString
        }
    }
};

type B = [B0: string | B1];

const x1: Reflect<B> = {
    kind: RepKindEnum,
    value: B0("hello"),
    variants: {
        caseB0: {
            name: "B0",
            kind: RepKindString
        },
        caseB1: {
            name: "B1",
            kind: RepKindUnit
        }
    }
};

type C = [C0: A | C1: B];

const x2: Reflect<C> = {
    kind: RepKindEnum,
    value: C0({a: "hello"}),
    variants: {
        caseC0: {
            name: "C0",
            kind: {
                kind: RepKindObject,
                props: {
                    a: {
                        name: "a",
                        kind: RepKindString
                    }
                }
            }
        },
        caseC1: {
            name: "C1",
            kind: {
                kind: RepKindEnum,
                variants: {
                    caseB0: {
                        name: "B0",
                        kind: RepKindString
                    },
                    caseB1: {
                        name: "B1",
                        kind: RepKindUnit
                    }
                }
            }
        }
    }
};

type D = {a: A, b: B};

const x3: Reflect<D> = {
    kind: RepKindObject,
    value: {
        a: {a: "hello"},
        b: B1
    },
    props: {
        a: {
            name: "a",
            kind: {
                kind: RepKindObject,
                props: {
                    a: {
                        name: "a",
                        kind: RepKindString
                    }
                }
            }
        },
        b: {
            name: "b",
            kind: {
                kind: RepKindEnum,
                variants: {
                    caseB0: {
                        name: "B0",
                        kind: RepKindString
                    },
                    caseB1: {
                        name: "B1",
                        kind: RepKindUnit
                    }
                }
            }
        }
    }
};

type E = {_a: string};

const x4: Reflect<E> = {
    kind: RepKindObject,
    value: {_a: "hello"},
    props: {
        _a: {
            name: "_a",
            kind: RepKindString
        }
    }
};

type F = [_F0 | _F1];

const x5: Reflect<F> = {
    kind: RepKindEnum,
    value: _F0,
    variants: {
        _caseF0: {
            name: "_F0",
            kind: RepKindUnit
        },
        _caseF1: {
            name: "_F1",
            kind: RepKindUnit
        }
    }
};

type G = string;

const x6: Reflect<G> = {
    kind: RepKindString,
    value: "hello"
};

type H<A, B> = {a: A, b: B};

//const x7: Reflect<H, number, string> = {
//    kind: RepKindGeneric,
//    params: {
//        paramA: "A",
//        paramB: "B"
//    },
//    body: {
//        kind: RepKindObject,
//        props: {
//            a: {
//                name: "a",
//                kind: RepKindNumber
//            },
//            b: {
//                name: "b",
//                kind: RepKindString
//            }
//        }
//    },
//    value: {a: 42, b: "hello"}
//};
